#BlueJ class context
comment0.params=
comment0.target=void\ checkDeclarations()
comment0.text=\r\n\ Test\ declarations\ of\ feilds.\r\n
comment1.params=
comment1.target=void\ checkSilent()
comment1.text=\r\n\ Run\ all\ tests.\r\n
comment10.params=parameters
comment10.target=void\ checkConstructor(java.lang.String[])
comment10.text=\r\n\ Tests\ for\ a\ constructor\ with\ a\ given\ number\ and\r\n\ type\ of\ parameters.\r\n\ \r\n\ @param\ parameters\ A\ variable\ list\ of\ parameter\ types\r\n\ as\ Strings.\ \ Put\ any\ types\ and\ this\ method\ will\r\n\ attempt\ to\ find\ a\ constructor\ with\ those\ types\ in\r\n\ the\ specified\ order.\r\n
comment11.params=name\ expectedReturn\ parameters
comment11.target=void\ checkMethod(java.lang.String,\ java.lang.String,\ java.lang.String[])
comment11.text=\r\n\ Tests\ for\ a\ constructor\ with\ a\ given\ number\ and\r\n\ type\ of\ parameters.\r\n\ \r\n\ @param\ name\ Search\ for\ a\ method\ with\ this\ name.\r\n\ @param\ expectedReturn\ Expected\ type\ of\ the\ return.\r\n\ @param\ parameters\ A\ variable\ list\ of\ parameter\ types\r\n\ as\ Strings.\ \ Put\ any\ types\ and\ this\ method\ will\r\n\ attempt\ to\ find\ a\ constructor\ with\ those\ types\ in\r\n\ the\ specified\ order.\r\n
comment12.params=parameters
comment12.target=java.lang.String\ getParameterList(java.lang.String[])
comment12.text=\r\n\ Return\ the\ parameters\ as\ a\ comma\ separated\ list\r\n\ or\ return\ none.\r\n\ \r\n\ @param\ parameters\ List\ of\ parameter\ types\ as\ strings.\r\n\ \r\n\ @return\ Returns\ all\ parameters\ as\ a\ single\ comma\r\n\ separated\ list.\r\n
comment13.params=parameters
comment13.target=java.lang.Class[]\ getTypeClassArray(java.lang.String[])
comment13.text=\r\n\ Turn\ a\ string\ array\ of\ types\ into\ an\ array\ of\ Class\ types.\r\n\ \r\n\ @param\ parameters\ A\ list\ of\ parameter\ types\ as\ Strings.\r\n\ \r\n\ @return\ Returns\ an\ array\ of\ Class\ objects\ based\ on\ the\r\n\ parameter\ list\ which\ are\ String\ objects.\r\n
comment14.params=name\ expectedType
comment14.target=void\ checkOneField(java.lang.String,\ java.lang.String)
comment14.text=\r\n\ Test\ Chalk\ class\ for\ a\ specific\ field\ name\ and\ correct\ type.\r\n\ \r\n\ @param\ name\ Make\ sure\ Chalk\ has\ a\ field\ of\ this\ name.\r\n\ @param\ expectedType\ Make\ sure\ the\ name\ field\ has\ this\ type.\r\n
comment15.params=name\ expectedType
comment15.target=void\ checkOneAccessor(java.lang.String,\ java.lang.String)
comment15.text=\r\n\ Test\ the\ Chalk\ class\ for\ a\ specific\ accessor\ for\ existance\ and\ type.\r\n\ @param\ name\ The\ expected\ name\ of\ the\ accessor.\r\n\ @param\ expectedType\ The\ expected\ return\ type\ of\ the\ accessor\r\n\ of\ this\ type.\r\n
comment16.params=name\ expectedType
comment16.target=void\ checkOneMutator(java.lang.String,\ java.lang.String)
comment16.text=\r\n\ Test\ the\ Chalk\ class\ for\ a\ specific\ accessor\ for\ existance\ and\ type.\r\n\ @param\ name\ The\ expected\ name\ of\ the\ accessor.\r\n\ @param\ expectedType\ The\ expected\ parameter\ type\ of\ the\ accessor\r\n\ of\ this\ type.\r\n
comment17.params=expectedType
comment17.target=java.lang.Class\ getTypeClass(java.lang.String)
comment17.text=\r\n\ Turn\ a\ string\ class\ description\ into\ a\ class\ type.\r\n\ \r\n\ @param\ expectedType\ The\ string\ representation\ of\ a\ type.\r\n\ For\ example\ "int",\ "double",\ "java.lang.String",\ etc...\r\n\ \r\n\ @return\ Return\ the\ class\ definition\ of\ a\ string\ representation\r\n\ of\ a\ type.\r\n
comment18.params=grade
comment18.target=void\ printGrade(int)
comment18.text=\r\n\ Store\ the\ grade\ at\ the\ point\ of\ failure\ then\ prints\ the\ report.\r\n\ @param\ grade\ The\ grade\ at\ the\ point\ of\ failure.\r\n
comment19.params=
comment19.target=java.lang.String\ gradeReport()
comment19.text=\r\n\ Creates\ a\ string\ with\ the\ grades\ for\ output.\r\n\ @return\ Returns\ a\ report\ of\ the\ grade\ for\ the\ student\r\n\ at\ the\ point\ of\ the\ failure.\r\n
comment2.params=
comment2.target=void\ checkStudent()
comment2.text=\r\n\ Test\ fields,\ accessors,\ and\ mutators.\r\n
comment3.params=numberOfFields
comment3.target=void\ checkNumberOfFields(int)
comment3.text=\r\n\ Make\ sure\ there\ are\ exactly\ this\ many\ field.\r\n\ @param\ numberOfFields\ The\ exact\ number\ of\ fields\ that\ should\r\n\ be\ present.\r\n
comment4.params=name
comment4.target=void\ printHeader(java.lang.String)
comment4.text=\r\n\ Print\ a\ standard\ header.\ Useful\ if\ testing\ multiple\r\n\ classes\ for\ proper\ declaration.\r\n\ \r\n\ @param\ name\ The\ name\ of\ the\ class\ that\ is\ currently\r\n\ being\ tested.\r\n
comment5.params=
comment5.target=void\ checkClass()
comment5.text=\r\n\ Check\ that\ the\ class\ is\ properly\ named.\r\n
comment6.params=
comment6.target=void\ checkMain()
comment6.text=\r\n\ Check\ to\ see\ if\ a\ properly\ declared\ main\ exists.\r\n\ public,\ static,\ and\ void\ with\ String[]\ parameter.\r\n
comment7.params=
comment7.target=void\ checkFields()
comment7.text=\r\n\ Check\ that\ all\ fields\ exist\ as\ named.\r\n\ Check\ that\ all\ fields\ are\ of\ the\ correct\ type.\r\n\ Check\ that\ all\ fields\ are\ private.\r\n
comment8.params=
comment8.target=void\ checkAccessors()
comment8.text=\r\n\ Check\ that\ all\ the\ accessors\ are\ correct.\r\n
comment9.params=
comment9.target=void\ checkMutators()
comment9.text=\r\n\ Check\ that\ all\ the\ mutators\ are\ correct.\r\n
numComments=20
