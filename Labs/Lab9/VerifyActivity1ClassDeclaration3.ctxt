#BlueJ class context
comment0.params=
comment0.target=VerifyActivity1ClassDeclaration3()
comment0.text=\r\n\ No-arg\ constructor\ for\ test\ class\ VerifyClassDeclaration.\r\n
comment1.params=
comment1.target=void\ setUp()
comment1.text=\r\n\ Sets\ up\ the\ test\ fixture.\r\n\ \r\n\ Called\ before\ every\ test\ case\ method.\r\n
comment10.params=
comment10.target=void\ checkOtherPrivateMethods()
comment10.text=\r\n\ Check\ that\ all\ the\ other\ methods\ are\ correct.\r\n
comment11.params=parameters
comment11.target=void\ checkConstructor(java.lang.String[])
comment11.text=\r\n\ Tests\ for\ a\ constructor\ with\ a\ given\ number\ and\ type\ of\ parameters.\r\n\ \r\n\ @param\ parameters\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ variable\ list\ of\ parameter\ types\ as\ Strings.\ Put\ any\ types\r\n\ \ \ \ \ \ \ \ \ \ \ \ and\ this\ method\ will\ attempt\ to\ find\ a\ constructor\ with\ those\r\n\ \ \ \ \ \ \ \ \ \ \ \ types\ in\ the\ specified\ order.\r\n
comment12.params=parameters
comment12.target=java.lang.String\ getParameterList(java.lang.String[])
comment12.text=\r\n\ Return\ the\ parameters\ as\ a\ comma\ separated\ list\ or\ return\ none.\r\n\ \r\n\ @param\ parameters\r\n\ \ \ \ \ \ \ \ \ \ \ \ List\ of\ parameter\ types\ as\ strings.\r\n\ \r\n\ @return\ Returns\ all\ parameters\ as\ a\ single\ comma\ separated\ list.\r\n
comment13.params=parameters
comment13.target=java.lang.Class[]\ getClassArray(java.lang.String[])
comment13.text=\r\n\ Turn\ a\ string\ array\ of\ types\ into\ an\ array\ of\ Class\ types.\r\n\ \r\n\ @param\ parameters\r\n\ \ \ \ \ \ \ \ \ \ \ \ A\ list\ of\ parameter\ types\ as\ Strings.\r\n\ \r\n\ @return\ Returns\ an\ array\ of\ Class\ objects\ based\ on\ the\ parameter\ list\r\n\ \ \ \ \ \ \ \ \ which\ are\ String\ objects.\r\n
comment14.params=name\ expectedType
comment14.target=void\ checkOneField(java.lang.String,\ java.lang.String)
comment14.text=\r\n\ Test\ Chalk\ class\ for\ a\ specific\ field\ name\ and\ correct\ type.\r\n\ \r\n\ @param\ name\r\n\ \ \ \ \ \ \ \ \ \ \ \ Make\ sure\ Chalk\ has\ a\ field\ of\ this\ name.\r\n\ @param\ expectedType\r\n\ \ \ \ \ \ \ \ \ \ \ \ Make\ sure\ the\ name\ field\ has\ this\ type.\r\n
comment15.params=name\ expectedType
comment15.target=void\ checkOneConstant(java.lang.String,\ java.lang.String)
comment15.text=\r\n\ Test\ Chalk\ class\ for\ a\ specific\ constant\ name\ and\ correct\ type.\r\n\ \r\n\ @param\ name\r\n\ \ \ \ \ \ \ \ \ \ \ \ Make\ sure\ Chalk\ has\ a\ field\ of\ this\ name.\r\n\ @param\ expectedType\r\n\ \ \ \ \ \ \ \ \ \ \ \ Make\ sure\ the\ name\ field\ has\ this\ type.\r\n
comment16.params=name\ expectedType
comment16.target=void\ checkOneAccessor(java.lang.String,\ java.lang.String)
comment16.text=\r\n\ Test\ the\ Chalk\ class\ for\ a\ specific\ accessor\ for\ existance\ and\ type.\r\n\ \r\n\ @param\ name\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ expected\ name\ of\ the\ accessor.\r\n\ @param\ expectedType\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ expected\ return\ type\ of\ the\ accessor\ of\ this\ type.\r\n
comment17.params=name\ expectedType
comment17.target=void\ checkOneMutator(java.lang.String,\ java.lang.String)
comment17.text=\r\n\ Test\ the\ Chalk\ class\ for\ a\ specific\ accessor\ for\ existance\ and\ type.\r\n\ \r\n\ @param\ name\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ expected\ name\ of\ the\ accessor.\r\n\ @param\ expectedType\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ expected\ parameter\ type\ of\ the\ accessor\ of\ this\ type.\r\n
comment18.params=methodName\ retType\ paramTypeNames
comment18.target=void\ checkOneOtherMethod(java.lang.String,\ java.lang.String,\ java.lang.String[])
comment18.text=\r\n\ Tests\ the\ class\ for\ the\ given\ method,\ name,\ parameters,\ and\ return.\r\n\ \r\n\ @param\ methodName\r\n\ \ \ \ \ \ \ \ \ \ The\ expected\ method\ name.\r\n\ @param\ retType\r\n\ \ \ \ \ \ \ \ \ \ The\ expected\ method\ return\ type.\r\n\ @param\ paramTypeNames\r\n\ \ \ \ \ \ \ \ \ \ The\ expected\ method\ parameter\ types.\r\n
comment19.params=methodName\ retType\ paramTypeNames
comment19.target=void\ checkOneOtherPrivateMethod(java.lang.String,\ java.lang.String,\ java.lang.String[])
comment19.text=\r\n\ Tests\ the\ class\ for\ the\ given\ method,\ name,\ parameters,\ and\ return.\r\n\ \r\n\ @param\ methodName\r\n\ \ \ \ \ \ \ \ \ \ The\ expected\ method\ name.\r\n\ @param\ retType\r\n\ \ \ \ \ \ \ \ \ \ The\ expected\ method\ return\ type.\r\n\ @param\ paramTypeNames\r\n\ \ \ \ \ \ \ \ \ \ The\ expected\ method\ parameter\ types.\r\n
comment2.params=
comment2.target=void\ tearDown()
comment2.text=\r\n\ Tears\ down\ the\ test\ fixture.\r\n\ \r\n\ Called\ after\ every\ test\ case\ method.\r\n
comment20.params=expectedType
comment20.target=java.lang.Class\ getClass(java.lang.String)
comment20.text=\r\n\ Turn\ a\ string\ class\ description\ into\ a\ class\ type.\r\n\ \r\n\ @param\ expectedType\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ string\ representation\ of\ a\ type.\ For\ example\ "int",\r\n\ \ \ \ \ \ \ \ \ \ \ \ "double",\ "java.lang.String",\ etc...\r\n\ \r\n\ @return\ Return\ the\ class\ definition\ of\ a\ string\ representation\ of\ a\ type.\r\n
comment21.params=grade
comment21.target=void\ printGrade(int)
comment21.text=\r\n\ Store\ the\ grade\ then\ print\ the\ report.\ The\ report\ only\ prints\ after\ a\r\n\ fail.\ So\ this\ is\ the\ final\ grade.\r\n\ \r\n\ @param\ grade\r\n\ \ \ \ \ \ \ \ \ \ \ \ The\ grade\ for\ failing\ at\ this\ point.\r\n
comment22.params=
comment22.target=java.lang.String\ gradeReport()
comment22.text=\r\n\ Creates\ a\ string\ with\ the\ grades\ for\ output.\r\n\ \r\n\ @return\ Returns\ the\ grade\ report\ as\ a\ string\ for\ use\ elsewhere.\r\n
comment3.params=
comment3.target=void\ checkFieldsAccessorsMutators()
comment3.text=\r\n\ Test\ fields,\ accessors,\ and\ mutators.\r\n
comment4.params=
comment4.target=void\ checkClass()
comment4.text=\r\n\ Check\ that\ the\ class\ is\ properly\ named.\r\n
comment5.params=
comment5.target=void\ checkFields()
comment5.text=\r\n\ Check\ that\ all\ fields\ exist\ as\ named.\ Check\ that\ all\ fields\ are\ of\ the\r\n\ correct\ type.\ Check\ that\ all\ fields\ are\ private.\r\n
comment6.params=
comment6.target=void\ checkConstants()
comment6.text=\r\n\ Check\ that\ all\ constants\ exist\ as\ named.\ Check\ that\ all\ constants\ are\ \r\n\ of\ the\ correct\ type.\ Check\ that\ all\ constants\ are\ public\ static\ final.\r\n
comment7.params=
comment7.target=void\ checkAccessors()
comment7.text=\r\n\ Check\ that\ all\ the\ accessors\ are\ correct.\r\n
comment8.params=
comment8.target=void\ checkMutators()
comment8.text=\r\n\ Check\ that\ all\ the\ mutators\ are\ correct.\r\n
comment9.params=
comment9.target=void\ checkOtherMethods()
comment9.text=\r\n\ Check\ that\ all\ the\ other\ methods\ are\ correct.\r\n
numComments=23
