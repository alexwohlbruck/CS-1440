#BlueJ class context
comment0.params=
comment0.target=PostlabMethodTest()
comment0.text=\r\n\ Default\ constructor\ for\ test\ class\ PayStubTest.\r\n
comment1.params=
comment1.target=void\ setUp()
comment1.text=\r\n\ Sets\ up\ the\ test\ fixture.\r\n\r\n\ Called\ before\ every\ test\ case\ method.\r\n
comment10.params=
comment10.target=java.lang.String[]\ makeExpectedOutput()
comment10.text=\r\n\ Build\ expected\ output\ array.\r\n\ \r\n\ @return\ String[]\ array\ of\ expeccted\ outpout\r\n
comment11.params=outputString
comment11.target=void\ verifySampleOutput(java.lang.String)
comment11.text=\r\n\ Private\ method\ to\ verify\ student\ output\ when\ given\ sample\ input.\r\n\ \r\n\ @param\ outputString\ is\ the\ student\ program's\ actual\ output\r\n
comment12.params=firstLine
comment12.target=void\ checkFirstLineUnderscores(java.lang.String)
comment12.text=\r\n\ Check\ for\ issues\ related\ to\ the\ first\ line\ of\ the\ paystub.\ \ The\ output\r\n\ of\ the\ first\ line\ should\ be\ (if\ the\ student\ followed\ directions)\ all\r\n\ of\ the\ prompts\ plus\ the\ first\ line\ of\ underscores\ of\ the\ paystub.\ \ \ \ \ \r\n\ \r\n\ If\ underscore\ is\ missing,\ user\ used\ newlines\ or\ printlns\ in\ prompts\r\n\ even\ thought\ they\ were\ directed\ not\ to.\r\n\ \r\n\ The\ second\ check\ makes\ sure\ there\ is\ at\ least\ 60\ underscores.\r\n\ \r\n\ @param\ firstLine\ The\ first\ line\ of\ the\ students\ output.\r\n
comment13.params=line
comment13.target=boolean\ lineOfUnderscores(java.lang.String)
comment13.text=\r\n\ Check\ proper\ format\ of\ output\ consisting\ of\ a\ line\ of\ underscores.\r\n\ \r\n\ @param\ line\ is\ the\ line\ to\ check\ \r\n\ @return\ boolean\ value\ indicating\ success\ of\ the\ check\r\n
comment14.params=line
comment14.target=boolean\ noUnderscores(java.lang.String)
comment14.text=\r\n\ It\ the\ student\ did\ not\ use\ newlines\ or\ printlns\ in\ the\ prompts\r\n\ then\ the\ first\ output\ line\ will\ contain\ all\ of\ the\ prompt\ messages\r\n\ AND\ the\ first\ line\ of\ the\ paystub\ which\ is\ the\ underscores.\r\n\r\n\ If\ the\ student\ DID\ NOT\ FOLLOW\ DIRECTIONS\ and\ DID\ use\ newlines\ or\ \r\n\ printlns\ in\ the\ prompt,\ then\ the\ first\ output\ line\ will\ contain\ only\r\n\ the\ first\ prompt\ and\ will\ not\ contain\ underscores.\r\n\r\n\ This\ method\ checks\ for\ missing\ underscores\ which\ indicates\ that\ the\ \r\n\ student\ did\ incorrectly\ use\ newlines\ or\ printlns\ in\ their\ prompts.\r\n\r\n\ @param\ line\ is\ the\ line\ to\ check\ \r\n\ @return\ boolean\ value\ indicating\ success\ of\ the\ check\r\n
comment15.params=output\ msg\ expected
comment15.target=void\ checkLine(java.util.Scanner,\ java.lang.String,\ java.lang.String)
comment15.text=\r\n\ Private\ method\ to\ check\ proper\ format\ of\ output\ line.\r\n\ \r\n\ @param\ output\ Scanner\ containing\ next\ line\ to\ check\r\n\ @param\ msg\ is\ a\ pretty\ printing\ message\r\n\ @param\ expected\ is\ the\ expected\ output\r\n
comment16.params=
comment16.target=void\ testCheckStyle()
comment16.text=\r\n\ Entry\ point\ for\ testing\ conformance\ to\ Checkstyle.\r\n
comment17.params=
comment17.target=java.lang.String\ getXmlHeaderConfig()
comment17.text=\r\n\ Local\ method\ to\ build\ XML\ for\ checkstyle.\r\n\ \r\n\ @return\ header\ string\ for\ XML\ file\r\n
comment18.params=
comment18.target=java.lang.String\ getMagicNumbersConfig()
comment18.text=\r\n\ Local\ method\ to\ build\ XML\ for\ checkstyle.\r\n\ \r\n\ @return\ checkstyle\ module\ definition\ for\ magic\ numbers\r\n
comment19.params=
comment19.target=java.lang.String\ getWhitespacecConfig()
comment19.text=\r\n\ Local\ method\ to\ build\ XML\ for\ checkstyle.\r\n\ \r\n\ @return\ checkstyle\ module\ definition\ for\ whitespace\ around\ operators\r\n
comment2.params=
comment2.target=void\ tearDown()
comment2.text=\r\n\ Tears\ down\ the\ test\ fixture.\r\n\r\n\ Called\ after\ every\ test\ case\ method.\r\n
comment20.params=
comment20.target=java.lang.String\ getXmlConfig()
comment20.text=\r\n\ Local\ method\ to\ build\ XML\ for\ checkstyle.\r\n\ \r\n\ @return\ XML\ configuration\ string\r\n
comment3.params=
comment3.target=void\ resetStreams()
comment3.text=\r\n\ Resets\ I/O\ streams.\r\n
comment4.params=
comment4.target=void\ testPostlab()
comment4.text=\r\n\ The\ "entry\ point"\ for\ testing\ activity\ 2.\r\n
comment5.params=
comment5.target=void\ printGrade()
comment5.text=\r\n\ Store\ the\ grade\ then\ print\ the\ report.\r\n
comment6.params=
comment6.target=java.lang.String\ gradeReport()
comment6.text=\r\n\ Creates\ a\ string\ with\ the\ grades\ for\ output.\r\n\ \r\n\ @return\ a\ String\ containing\ the\ grader\ report\r\n
comment7.params=
comment7.target=void\ testPrevious()
comment7.text=\r\n\ Test\ previous\ activities.\r\n
comment8.params=
comment8.target=void\ testSilent()
comment8.text=\r\n\ Silently\ (no\ output)\ tests\ in\ various\ ways\ the\ activity\ 1\ work.\r\n\ Notice\ that\ we\ can\ assign\ partial\ grades\ as\ some\ "subtests"\ work\ using\r\n\ the\ grade\ field.\ \ But\ we\ must\ be\ sure\ to\ printGrade\ before\ failing.\r\n
comment9.params=
comment9.target=void\ testSampleData()
comment9.text=\r\n\ Test\ with\ sample\ data.\r\n
numComments=21
