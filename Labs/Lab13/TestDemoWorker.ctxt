#BlueJ class context
comment0.target=TestDemoWorker
comment0.text=\r\n\ Describe\ TestDemoWorker\ here.\r\n\r\n\ @author\ (Your\ name\ here)\r\n\ @version\ (Date\ or\ version\ number)\r\n
comment1.params=
comment1.target=TestDemoWorker()
comment1.text=\r\n\ Default\ constructor\ for\ test\ class\ TestDemoWorker.\r\n
comment10.params=employees\ name\ myClass
comment10.target=boolean\ findEmployee(java.util.ArrayList,\ java.lang.String,\ java.lang.Class)
comment10.text=\r\n\ Find\ a\ single\ employee\ object\ in\ the\ array\ list\ with\ the\ given\r\n\ name\ and\ class\ type.\r\n\ @param\ employees\ The\ ArrayList\ of\ employee\ objects\ to\ search.\r\n\ @param\ name\ The\ name\ of\ the\ employee\ to\ find.\r\n\ @param\ myClass\ The\ name\ of\ the\ subclass\ that\ this\ employee\ should\ be\r\n\ if\ the\ student\ did\ the\ work\ properly.\r\n\ @return\ Returns\ true\ if\ the\ employee\ is\ found\ and\ is\ the\ correct\ type.\r\n
comment11.params=
comment11.target=java.lang.String[]\ capture()
comment11.text=\r\n\ Capture\ student\ output.\r\n\ @return\ Returns\ the\ output\ of\ the\ student\ data\ as\ an\ array\ of\ strings.\r\n
comment2.params=
comment2.target=void\ setUp()
comment2.text=\r\n\ Sets\ up\ the\ test\ fixture.\r\n\r\n\ Called\ before\ every\ test\ case\ method.\r\n
comment3.params=
comment3.target=void\ tearDown()
comment3.text=\r\n\ Tears\ down\ the\ test\ fixture.\r\n\r\n\ Called\ after\ every\ test\ case\ method.\r\n
comment4.params=
comment4.target=void\ checkEmployeeSize001()
comment4.text=\r\n\ Check\ the\ number\ of\ items\ in\ employees.\r\n
comment5.params=
comment5.target=void\ checkEmployeeTypes002()
comment5.text=\r\n\ Check\ the\ types\ of\ objects\ stored.\ \ Mostly\ to\ make\ sure\r\n\ no\ employee\ obects\ were\ created.\r\n
comment6.params=
comment6.target=void\ checkCorrectEmployees003()
comment6.text=\r\n\ Check\ the\ types\ of\ objects\ stored.\ \ Mostly\ to\ make\ sure\r\n\ no\ employee\ obects\ were\ created.\r\n
comment7.params=
comment7.target=void\ checkOutput()
comment7.text=\r\n\ Test\ DemoWorker\ output.\r\n
comment8.params=output\ start\ end
comment8.target=boolean\ findInOutput(java.lang.String[],\ java.lang.String,\ double)
comment8.text=\r\n\ Find\ a\ line\ in\ the\ output\ array\ that\ starts\ with\ and\ ends\ with\ a\r\n\ particular\ string.\ The\ end\ string\ is\ a\ dollar\ amount\ which\ is\ \r\n\ calculated\ and\ therefore\ needs\ to\ allow\ for\ rounding\ errors.\r\n\ @param\ output\ Array\ of\ strings\ which\ contains\ each\ line\ of\ the\r\n\ students\ output.\r\n\ @param\ start\ String\ that\ should\ be\ the\ start\ of\ one\ of\ the\ lines\r\n\ of\ output.\r\n\ @param\ end\ The\ amount\ of\ the\ string\ that\ should\ end\ the\ output\ line\r\n\ that\ starts\ with\ the\ starting\ string.\ \ This\ double\ is\ converted\ into\r\n\ a\ string.\ \ \r\n\ @return\ Returns\ true\ if\ one\ single\ line\ of\ the\ students\ output\ starts\r\n\ with\ the\ starting\ string\ and\ ends\ with\ the\ dollar\ amount\ given\ plus\r\n\ or\ minus\ one\ cent.\ Returns\ false\ if\ a\ string\ matching\ that\ pattern\r\n\ is\ not\ found.\r\n
comment9.params=output\ start\ end
comment9.target=boolean\ findInOutput(java.lang.String[],\ java.lang.String,\ java.lang.String)
comment9.text=\r\n\ Find\ a\ single\ line\ in\ the\ output\ array\ that\ starts\ and\ ends\ with\ a\r\n\ particular\ given\ set\ of\ strings.\ \r\n\ @param\ output\ Array\ of\ strings\ which\ contains\ each\ line\ of\ the\r\n\ students\ output.\r\n\ @param\ start\ The\ beginning\ of\ the\ string.\r\n\ @param\ end\ The\ end\ of\ the\ string.\ \r\n\ @return\ Returns\ true\ if\ one\ single\ line\ of\ the\ students\ output\ starts\r\n\ with\ the\ starting\ string\ and\ that\ same\ line\ matches\ the\ end\ string.\ \r\n\ Returns\ false\ if\ a\ string\ matching\ that\ pattern\ is\ not\ found.\r\n
numComments=12
